// ALERT: If messages in this proto file are ADDED or REMOVED, or if the
// definitions of existing message fields are CHANGED, then the VER_PROTO_MAJOR
// enum value in Version.proto must be incremented and backward compatibility
// will be lost. If fields are APPENDED to the end of existing message
// definitions, then VER_PROTO_MINOR must be incremented and backward
// compatibility will be maintained. Unused messages and parameters should be
// marked as deprecated, and these should be removed at the next major version
// change.

syntax = "proto2";

import "SDMS.proto";

package SDMS.Anon;

enum Protocol
{
    ID = 1;
}


// The AckReply is a simple positive acknowledgement for requests that do not
// need to reply with any data payload.
message AckReply
{
}

// NackReply is used to convey error information and can be returned from any
// request.
message NackReply
{
    required SDMS.ErrorCode     err_code    = 1;
    optional string             err_msg     = 2;
}

// Request to get system version information
// Reply: VersionReply on success, NackError on error
message VersionRequest
{
}

// Reply containing system version information. This information is compared
// to client/server local version information to determine if interoperability
// is possible.
message VersionReply
{
    required uint32             major       = 1; // System MAJOR version, no backward compatibility
    required uint32             mapi_major  = 2; // Message API MAJOR version, no backward compatibility
    required uint32             mapi_minor  = 3; // Message API MINOR version, backward compatible
    required uint32             core        = 4; // Core server MINOR version, information only
    required uint32             web         = 5; // Web server MINOR version, info/notification purposes
    required uint32             repo        = 6; // Repo server MINOR version, info/notification purposes
    required uint32             client_py   = 7; // Python client/api MINOR version, info/notification purposes
}

// Request to get client authentication status
// Reply: AuthStatusReply on success, NackError on error
message GetAuthStatusRequest
{
}

// Request to authenticate by password
// Reply: AuthStatusReply on success, NackError on error
message AuthenticateByPasswordRequest
{
    required string             uid         = 1;    // Local user ID
    required string             password    = 2;    // Password
}

// Request to authenticate by Globus access token
// Reply: AuthStatusReply on success, NackError on error
message AuthenticateByTokenRequest
{
    required string             token       = 1;    // Access token
}

// Reply containing client authentication status
message AuthStatusReply
{
    required bool               auth        = 1; // Authenticated if true
    optional string             uid         = 2; // DataFed user id
}

// Get the system daily message
// Reply: DailyMessageReply
message DailyMessageRequest
{
}

message DailyMessageReply
{
    optional string             message     = 1; // Daily message, if set
}

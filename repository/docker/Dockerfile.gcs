# NOTE this image must be built with respect to the base of the project i.e.
ARG                        BUILD_BASE="debian:bookworm-slim"
ARG                      DEPENDENCIES="dependencies"
ARG                           RUNTIME="runtime"
ARG                       DATAFED_DIR="/datafed"
ARG              DATAFED_INSTALL_PATH="/opt/datafed"
ARG DATAFED_DEPENDENCIES_INSTALL_PATH="/opt/datafed/dependencies"
ARG                         GCS_IMAGE="code.ornl.gov:4567/dlsw/datafed/gcs-ubuntu-focal"
ARG                         BUILD_DIR="$DATAFED_DIR/source"
ARG                           NVM_DIR="$DATAFED_DIR/.nvm"
ARG                           NVM_INC="$DATAFED_DIR/.nvm/versions/node/v13.14.0/include/node"
ARG                           NVM_BIN="$DATAFED_DIR/.nvm/versions/node/v13.14.0/bin"
ARG                           LIB_DIR="/usr/local/lib"

FROM ${DEPENDENCIES} AS dependencies

ARG DATAFED_DIR
ARG BUILD_DIR
ARG DATAFED_INSTALL_PATH
ARG DATAFED_DEPENDENCIES_INSTALL_PATH
ARG LIB_DIR

ENV DATAFED_DEPENDENCIES_INSTALL_PATH="$DATAFED_DEPENDENCIES_INSTALL_PATH"
ENV  DATAFED_GCS_COLLECTION_BASE_PATH="/mnt/datafed"
ENV  DATAFED_GCS_COLLECTION_ROOT_PATH="/mnt/datafed"
ENV     DATAFED_GLOBUS_CRED_FILE_PATH=/opt/datafed/globus/client_cred.json
ENV              DATAFED_INSTALL_PATH="$DATAFED_INSTALL_PATH"
ENV                       DATAFED_DIR="$DATAFED_DIR"
ENV                         BUILD_DIR="$BUILD_DIR"
ENV                           LIB_DIR="$LIB_DIR"
ENV          DATAFED_GLOBUS_REPO_USER="datafed"
ENV          DATAFED_DEFAULT_LOG_PATH="$DATAFED_INSTALL_PATH/logs"

COPY --chown=datafed:root ./scripts/dependency_versions.sh            ${BUILD_DIR}/scripts/
COPY --chown=datafed:root ./scripts/generate_authz_config.sh          ${BUILD_DIR}/scripts/generate_authz_config.sh
COPY --chown=datafed:root ./scripts/utils.sh                          ${BUILD_DIR}/scripts/utils.sh
COPY --chown=datafed:root ./CMakeLists.txt                            ${BUILD_DIR}
COPY --chown=datafed:root ./cmake                                     ${BUILD_DIR}/cmake
COPY --chown=datafed:root ./repository/CMakeLists.txt                 ${BUILD_DIR}/repository/CMakeLists.txt
COPY --chown=datafed:root ./repository/gridftp/CMakeLists.txt         ${BUILD_DIR}/repository/gridftp/CMakeLists.txt
COPY --chown=datafed:root ./scripts/globus/setup_globus.sh            ${BUILD_DIR}/scripts/globus/setup_globus.sh
COPY --chown=datafed:root ./scripts/globus/clean_globus.sh            ${BUILD_DIR}/scripts/globus/clean_globus.sh
COPY --chown=datafed:root ./scripts/globus/generate_repo_form.sh      ${BUILD_DIR}/scripts/globus/generate_repo_form.sh
COPY --chown=datafed:root ./repository/docker/entrypoint_authz.sh     ${BUILD_DIR}/repository/docker/entrypoint_authz.sh
COPY --chown=datafed:root ./common                                    ${BUILD_DIR}/common
COPY --chown=datafed:root ./repository/gridftp/globus5                ${BUILD_DIR}/repository/gridftp/globus5
COPY --chown=datafed:root ./scripts/generate_gsi-authz_config.sh      ${BUILD_DIR}/scripts/generate_gsi-authz_config.sh
COPY --chown=datafed:root ./scripts/globus/create_guest_collection.py ${BUILD_DIR}/scripts/globus/create_guest_collection.py
COPY --chown=datafed:root ./scripts/globus/utils.py                   ${BUILD_DIR}/scripts/globus/utils.py
COPY --chown=datafed:root ./scripts/globus/__init__.py                ${BUILD_DIR}/scripts/globus/__init__.py

RUN ${BUILD_DIR}/scripts/generate_gsi-authz_config.sh
# Don't build with syslog the container does not seem to support syslog
RUN ${BUILD_DIR}/scripts/generate_authz_config.sh &&  \
  ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/cmake -S. -B build  \
  -DBUILD_REPO_SERVER=False         \
  -DBUILD_AUTHZ_TESTS=True          \
  -DBUILD_AUTHZ=True                \
  -DBUILD_AUTHZ_WITH_SYSLOG=False   \
  -DBUILD_CORE_SERVER=False         \
  -DBUILD_WEB_SERVER=False          \
  -DBUILD_DOCS=False                \
  -DBUILD_PYTHON_CLIENT=False       \
  -DBUILD_FOXX=False
RUN  ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/cmake --build build -j 8
RUN ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/cmake --build build --target install

FROM ${GCS_IMAGE}

ARG DATAFED_DIR
ARG BUILD_DIR
ARG DATAFED_INSTALL_PATH
ARG DATAFED_DEPENDENCIES_INSTALL_PATH
ARG LIB_DIR

ENV DATAFED_DEPENDENCIES_INSTALL_PATH="$DATAFED_DEPENDENCIES_INSTALL_PATH"
ENV  DATAFED_GCS_COLLECTION_BASE_PATH="/mnt/datafed"
ENV  DATAFED_GCS_COLLECTION_ROOT_PATH="/mnt/datafed"
ENV     DATAFED_GLOBUS_CRED_FILE_PATH=/opt/datafed/globus/client_cred.json
ENV              DATAFED_INSTALL_PATH="$DATAFED_INSTALL_PATH"
ENV                       DATAFED_DIR="$DATAFED_DIR"
ENV                         BUILD_DIR="$BUILD_DIR"
ENV                           LIB_DIR="$LIB_DIR"
ENV          DATAFED_GLOBUS_REPO_USER="datafed"
ENV          DATAFED_DEFAULT_LOG_PATH="$DATAFED_INSTALL_PATH/logs"
# Value needed so tput command doesn't crash
ENV                              TERM="xterm"
ENV                    DATAFED_GCS_IP=""
ENV      BUILD_WITH_METADATA_SERVICES="TRUE"
ENV                    DATAFED_DOMAIN="localhost"

RUN mkdir -p ${BUILD_DIR}
RUN mkdir -p ${DATAFED_INSTALL_PATH}/logs
RUN mkdir -p ${BUILD_DIR}/common/proto
RUN mkdir -p ${DATAFED_INSTALL_PATH}/authz
RUN mkdir -p /mnt/datafed

# This is necessary for curl, which is used the entrypoint script
COPY --from=dependencies ${DATAFED_DEPENDENCIES_INSTALL_PATH}/lib/libssl.a   ${DATAFED_DEPENDENCIES_INSTALL_PATH}/lib/libssl.a
COPY --from=dependencies ${DATAFED_DEPENDENCIES_INSTALL_PATH}/lib/libcrypto.a   ${DATAFED_DEPENDENCIES_INSTALL_PATH}/lib/libcrypto.so
COPY --from=dependencies ${DATAFED_DEPENDENCIES_INSTALL_PATH}/python   ${DATAFED_DEPENDENCIES_INSTALL_PATH}/python
COPY --from=dependencies ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/python3.9   ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/python3.9

# Needed for tests
COPY --from=dependencies ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/cmake   ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/cmake
COPY --from=dependencies ${BUILD_DIR}/build ${BUILD_DIR}/build

# For communicating with public
EXPOSE 443

# Needed for Globus GridFTP communication
EXPOSE 50000-51000

WORKDIR ${BUILD_DIR}

RUN adduser --disabled-password --gecos "" datafed

RUN echo "#!/bin/bash\n\$@" > /usr/bin/sudo && chmod +x /usr/bin/sudo

COPY ./scripts/generate_datafed.sh             ${BUILD_DIR}/scripts/
COPY ./scripts/dependency_versions.sh          ${BUILD_DIR}/scripts/
COPY ./scripts/utils.sh                        ${BUILD_DIR}/scripts/utils.sh

RUN ${BUILD_DIR}/scripts/generate_datafed.sh

COPY --chown=datafed:root ./scripts/dependency_versions.sh            ${BUILD_DIR}/scripts/
COPY --chown=datafed:root ./scripts/generate_authz_config.sh          ${BUILD_DIR}/scripts/generate_authz_config.sh
COPY --chown=datafed:root ./scripts/utils.sh                          ${BUILD_DIR}/scripts/utils.sh
COPY --chown=datafed:root ./CMakeLists.txt                            ${BUILD_DIR}
COPY --chown=datafed:root ./cmake                                     ${BUILD_DIR}/cmake
COPY --chown=datafed:root ./repository/CMakeLists.txt                 ${BUILD_DIR}/repository/CMakeLists.txt
COPY --chown=datafed:root ./repository/gridftp/CMakeLists.txt         ${BUILD_DIR}/repository/gridftp/CMakeLists.txt
COPY --chown=datafed:root ./scripts/globus/setup_globus.sh            ${BUILD_DIR}/scripts/globus/setup_globus.sh
COPY --chown=datafed:root ./scripts/globus/clean_globus.sh            ${BUILD_DIR}/scripts/globus/clean_globus.sh
COPY --chown=datafed:root ./scripts/globus/generate_repo_form.sh      ${BUILD_DIR}/scripts/globus/generate_repo_form.sh
COPY --chown=datafed:root ./repository/docker/entrypoint_authz.sh     ${BUILD_DIR}/repository/docker/entrypoint_authz.sh
COPY --chown=datafed:root ./common                                    ${BUILD_DIR}/common
COPY --chown=datafed:root ./repository/gridftp/globus5                ${BUILD_DIR}/repository/gridftp/globus5
COPY --chown=datafed:root ./scripts/generate_gsi-authz_config.sh      ${BUILD_DIR}/scripts/generate_gsi-authz_config.sh
COPY --chown=datafed:root ./scripts/globus/create_guest_collection.py ${BUILD_DIR}/scripts/globus/create_guest_collection.py
COPY --chown=datafed:root ./scripts/globus/utils.py                   ${BUILD_DIR}/scripts/globus/utils.py
COPY --chown=datafed:root ./scripts/globus/__init__.py                ${BUILD_DIR}/scripts/globus/__init__.py
# These extra copy statements are necessary as the authz binary is built in the GCS container
# and not the dependencies container so we must copy the build dependencies as well as the
# runtime depedencies

RUN apt update
RUN apt-get install wget jq bind9-host build-essential -y
RUN apt-get reinstall globus-connect-server54 libsqlite3-dev -y

RUN ${BUILD_DIR}/scripts/generate_gsi-authz_config.sh
# Don't build with syslog the container does not seem to support syslog

COPY --from=dependencies --chown=datafed:root ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/curl ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/curl
COPY --from=dependencies --chown=datafed:root ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/ctest ${DATAFED_DEPENDENCIES_INSTALL_PATH}/bin/ctest
COPY --from=dependencies --chown=datafed:root ${DATAFED_INSTALL_PATH}/authz/ ${DATAFED_INSTALL_PATH}/authz/
COPY --from=dependencies --chown=datafed:root ${DATAFED_DEPENDENCIES_INSTALL_PATH}/python/datafed ${DATAFED_DEPENDENCIES_INSTALL_PATH}/python/datafed

# Get the file that is not a link and give it the right permissions
RUN chmod 755 ${DATAFED_INSTALL_PATH}/authz/$(ls -l /opt/datafed/authz/ | grep -v "^l" | grep libdatafed-authz | awk '{print  $9}')

COPY --chown=datafed:root ./scripts/globus/setup_globus.sh        ${BUILD_DIR}/scripts/globus/setup_globus.sh
COPY --chown=datafed:root ./scripts/globus/generate_repo_form.sh  ${BUILD_DIR}/scripts/globus/generate_repo_form.sh
COPY --chown=datafed:root ./repository/docker/entrypoint_authz.sh ${BUILD_DIR}/repository/docker/entrypoint_authz.sh

USER root

ENV LD_LIBRARY_PATH=/opt/datafed/dependencies/lib/

# Remove --client-id from command because it was deprecated
RUN sed -i '/--client-id/d' /entrypoint.sh

WORKDIR ${DATAFED_INSTALL_PATH}/authz

# NOTE If you do not overwrite the entrypoint file it will use the GCS instance
# provided one
ENTRYPOINT ["/datafed/source/repository/docker/entrypoint_authz.sh"]

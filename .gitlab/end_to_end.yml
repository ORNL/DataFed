---
################################################################################
# STAGE: End to end setup arango
################################################################################

end-to-end-arango-setup:
  variables:
    GIT_STRATEGY: clone
  stage: end-to-end-setup-arango
  tags:
    - ci-datafed-arango
  script:
    - arangod --version
    - ./scripts/run_arango_service.sh

end-to-end-foxx-setup:
  variables:
    PROJECT: "datafed"
    COMPONENT: "foxx"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_DATABASE_HOST: "$CI_DATAFED_DATABASE_HOST"
    RUN_FILE: "run_foxx.sh"
  stage: end-to-end-setup-arango
  needs: ["end-to-end-arango-setup"]
  tags:
    - docker
  script:
    - sudo apt-get install jq -y
    # Export is needed so the after_script section can use this
    - export BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - env > env_file
    - mkdir foxx_tmp
    - ls -la foxx_tmp
    - if [ -f foxx_tmp/.foxx_is_installed ]; then rm foxx_tmp/.foxx_is_installed; fi
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "foxx-" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - # Echo into GITLAB_ENV is needed so after_script has access
    - echo "random_string=${random_string}" >> $GITLAB_ENV
    - CONTAINER_NAME="foxx-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}"
    - echo "#!/bin/bash" > "${RUN_FILE}"
    - echo "docker run -d \\" >> "${RUN_FILE}"
    - echo "--name \"${CONTAINER_NAME}\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> "${RUN_FILE}"
    - echo "-e ENABLE_FOXX_TESTS=\"TRUE\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_PASSWORD=\"$CI_DATAFED_DATABASE_PASSWORD\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_IP_ADDRESS_PORT=\"$CI_DATAFED_DATABASE_IP_ADDRESS_PORT\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DATABASE_HOST=\"$CI_DATAFED_DATABASE_HOST\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> "${RUN_FILE}"
    - echo "-e UID=\"$USER_ID\" \\" >> "${RUN_FILE}"
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> "${RUN_FILE}"
    - echo "-v \"./foxx_tmp:/tmp\" \\" >> "${RUN_FILE}"
    - echo "-t \"${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}\"" >> "${RUN_FILE}"
    - chmod +x "${RUN_FILE}"
    - "./${RUN_FILE}"
    - sleep 10
      # Make sure container is running immediately after because it is meant to
      # be ephermal anyway, this is not the same for the other containers
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}"
    - while [ ! -f "foxx_tmp/.foxx_is_installed" ]; do
      # Container is found to be running
    -   if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    -     echo "Waiting for foxx_tmp/.foxx_is_installed"
    -     docker logs "foxx-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}";
    -     sleep 10
    -   else
      # Container is not running get exit code
    -     exit_code=$(docker inspect -f '{{.State.ExitCode}}' "$CONTAINER_NAME")
    -     if [ "$exit_code" != "0" ]; then
    -       docker logs "foxx-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}";
    -       exit "$exit_code"
    -     fi
    -   fi 
    - done
    - ./scripts/ci_database_health_check.sh
  after_script:
    # This is needed so that if there is a failure in the container we know
    # what caused it.
    - docker logs "foxx-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}";
    - rm -rf foxx_tmp

################################################################################
# STAGE: End to end setup
################################################################################

end-to-end-gcs-node-clean:
  variables:
    GIT_STRATEGY: clone
    DATAFED_GLOBUS_DIR: "/shared/globus"
  stage: end-to-end-setup
  needs: ["end-to-end-arango-setup", "end-to-end-foxx-setup"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - mkdir -p "${DATAFED_GLOBUS_DIR}"
    - cp "${CI_DATAFED_GCS_DEPLOYMENT_KEY}" "${DATAFED_GLOBUS_DIR}/deployment-key.json"
    - cp "${CI_DATAFED_GCS_CLIENT_CRED}" "${DATAFED_GLOBUS_DIR}/client_cred.json"
    - cat "${DATAFED_GLOBUS_DIR}/deployment-key.json" | jq .node_key > "${DATAFED_GLOBUS_DIR}/node_deletion_key.json"
    - SECRET=$(cat "${DATAFED_GLOBUS_DIR}/deployment-key.json" | jq -r .secret)
    - CLIENT=$(cat "${DATAFED_GLOBUS_DIR}/deployment-key.json" | jq -r .client_id)
    - GLOBUS_CLIENT_SECRET="${SECRET}" ./scripts/globus/clean_globus_nodes.py --client-id "${CLIENT}" --deployment-key "${DATAFED_GLOBUS_DIR}/node_deletion_key.json"

end-to-end-core-setup:
  variables:
    PROJECT: "datafed"
    COMPONENT: "core"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_DATABASE_HOST: "$CI_DATAFED_DATABASE_HOST"
  stage: end-to-end-setup
  needs: ["end-to-end-arango-setup", "end-to-end-foxx-setup"]
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - echo "$BRANCH_LOWER"
    - ./scripts/generate_datafed.sh
    - env > env_file
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "core-" -p
    - ./scripts/ci_database_health_check.sh
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/keys/datafed-core-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/keys/datafed-core-key.priv
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_core.sh
    - echo "docker run -d \\" >> run_core.sh
    - echo "--name \"core-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_core.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_core.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_core.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_core.sh
    - echo "-e DATAFED_DATABASE_PASSWORD=\"$CI_DATAFED_DATABASE_PASSWORD\" \\" >> run_core.sh
    - echo "-e DATAFED_DATABASE_IP_ADDRESS_PORT=\"$CI_DATAFED_DATABASE_IP_ADDRESS_PORT\" \\" >> run_core.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> run_core.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_core.sh
    - echo "-p 7513:7513 \\" >> run_core.sh
    - echo "-p 7512:7512 \\" >> run_core.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_core.sh
    - echo "-v \"/shared/keys/datafed-core-key.pub\":/opt/datafed/keys/datafed-core-key.pub \\" >> run_core.sh
    - echo "-v \"/shared/keys/datafed-core-key.priv\":/opt/datafed/keys/datafed-core-key.priv \\" >> run_core.sh
    - echo "-t \"${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}\"" >> run_core.sh
    - chmod +x run_core.sh
    - ./run_core.sh
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}" 

end-to-end-ws-setup:
  variables:
    PROJECT: "datafed"
    COMPONENT: "ws"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_WEB_KEY_DIR: "/shared/keys"
    DATAFED_WEB_CERT_NAME: "cert.crt"
    DATAFED_WEB_KEY_NAME: "cert.key"
    DATAFED_WEB_CERT_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_CERT_NAME}"
    DATAFED_WEB_CSR_PATH: "${DATAFED_WEB_KEY_DIR}/cert.csr"
    DATAFED_WEB_KEY_PATH: "${DATAFED_WEB_KEY_DIR}/${DATAFED_WEB_KEY_NAME}"
  stage: end-to-end-setup
  needs : ["end-to-end-core-setup"]
  tags:
    - ci-datafed-core
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - mkdir -p "${DATAFED_WEB_KEY_DIR}"
    - ./scripts/ci_setup_web_certs.sh
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login  "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - USER_ID=$(id -u)
    - GROUP_ID=$(id -g)
    - CORE_ADDRESS=$(hostname -I | awk '{print $1}')
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/keys/datafed-core-key.pub
    - env
    - ./scripts/container_stop.sh -n "ws-" -p 
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - echo "#!/bin/bash" > run_web.sh
    - echo "docker run -d \\" >> run_web.sh
    - echo "--name \"ws-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_web.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_web.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_web.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_web.sh
    - echo "-e DATAFED_WEB_CERT_PATH=\"/opt/datafed/keys/${DATAFED_WEB_CERT_NAME}\" \\" >> run_web.sh
    - echo "-e DATAFED_WEB_KEY_PATH=\"/opt/datafed/keys/${DATAFED_WEB_KEY_NAME}\" \\" >> run_web.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"${CONTAINER_LOG_FILE_PATH}\" \\" >> run_web.sh
    - echo "-e DATAFED_CORE_ADDRESS_PORT_INTERNAL=\"$CORE_ADDRESS:7513\" \\" >> run_web.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_web.sh
    - echo "-p 443:443 \\" >> run_web.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_web.sh
    - echo "-v \"/shared/keys/datafed-core-key.pub:/opt/datafed/keys/datafed-core-key.pub\" \\" >> run_web.sh
    - echo "-v \"${DATAFED_WEB_CERT_PATH}:/opt/datafed/keys/${DATAFED_WEB_CERT_NAME}\" \\" >> run_web.sh
    - echo "-v \"${DATAFED_WEB_KEY_PATH}:/opt/datafed/keys/${DATAFED_WEB_KEY_NAME}\" \\" >> run_web.sh
    - echo "-t \"${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}\" " >> run_web.sh
    - chmod +x run_web.sh
    - ./run_web.sh
    - sleep 30
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}" 

# Repo server currently will crash on startup if it cannot connect to the core
# server.
end-to-end-repo-setup:
  variables:
    PROJECT: "datafed"
    COMPONENT: "repo"
    GIT_STRATEGY: clone
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    DATAFED_HOST_COLLECTION_MOUNT: "/shared/collections"
    RUN_FILE: "run_repo.sh"
  stage: end-to-end-setup
  needs: ["end-to-end-ws-setup"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
      # Clean out previous collection to be safe
    - if [ -d "${DATAFED_HOST_COLLECTION_MOUNT}" ]; then rm -rf "${DATAFED_HOST_COLLECTION_MOUNT}"; fi
    - mkdir -p "${DATAFED_HOST_COLLECTION_MOUNT}"
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - USER_ID=$(id -u)
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "repo-" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/datafed-repo-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/datafed-repo-key.priv
    - echo "#!/bin/bash" > "${RUN_FILE}"
    - echo "docker run -d \\" >> "${RUN_FILE}"
    - echo "--name \"repo-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_HTTPS_SERVER_PORT=\"443\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_CORE_ADDRESS_PORT_INTERNAL=\"${CI_DATAFED_DOMAIN}:7513\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_REPO_ID_AND_DIR=\"${CI_DATAFED_REPO_ID_AND_DIR}\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> "${RUN_FILE}"
    - echo "-e DATAFED_GCS_COLLECTION_BASE_PATH=\"/mnt\" \\" >> "${RUN_FILE}"
    - echo "-e UID=\"$USER_ID\" \\" >> "${RUN_FILE}"
    - echo "-p 9000:9000 \\" >> "${RUN_FILE}"
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> "${RUN_FILE}"
    - echo "-v \"${DATAFED_HOST_COLLECTION_MOUNT}:/mnt/datafed\" \\" >> "${RUN_FILE}"
    - echo "-v \"/shared/datafed-repo-key.pub\":/opt/datafed/keys/datafed-repo-key.pub \\" >> "${RUN_FILE}"
    - echo "-v \"/shared/datafed-repo-key.priv\":/opt/datafed/keys/datafed-repo-key.priv \\" >> "${RUN_FILE}"
    - echo "-t \"${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}\"" >> "${RUN_FILE}"
    - chmod +x "${RUN_FILE}"
    - ./${RUN_FILE}
    - sleep 10
    - ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}" 


# Requires setting up Globus Connect Server, requires firewall exceptions on
# the machine running this.
# Note we need the certificates to be available on the gcs-authz container
# if it is meant to be run on the same machine as the metadata services
# because the Apache web server can then route traffic appropriately, if 
# run separate from the metadata services it should not be needed.
# NOTE it should also run after the repo service because when the form is
# generated, it requires the repo server public key.
end-to-end-gcs-authz-setup:
  variables:
    PROJECT: "datafed"
    COMPONENT: "gcs"
    HOST_LOG_FILE_PATH: "/shared/logs"
    CONTAINER_LOG_FILE_PATH: "/datafed/logs"
    GIT_STRATEGY: clone
    DATAFED_HOST_COLLECTION_MOUNT: "/shared/collections"
    DATAFED_GLOBUS_DIR: "/shared/globus"
  stage: end-to-end-setup
  needs: ["end-to-end-repo-setup", "end-to-end-gcs-node-clean"]
  tags:
    - ci-datafed-globus
    - docker
  script:
    - BRANCH_LOWER=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
    - echo "$BRANCH_LOWER"
    - mkdir -p "$HOST_LOG_FILE_PATH"
    - mkdir -p "${DATAFED_GLOBUS_DIR}"
    - cp "${CI_DATAFED_GCS_DEPLOYMENT_KEY}" "${DATAFED_GLOBUS_DIR}/deployment-key.json"
    - cp "${CI_DATAFED_GCS_CLIENT_CRED}" "${DATAFED_GLOBUS_DIR}/client_cred.json"
    - USER_ID=$(id -u)
    - chmod o+w "${HOST_LOG_FILE_PATH}"
    - chown gitlab-runner "$HOST_LOG_FILE_PATH"
    - ./scripts/generate_datafed.sh
    - docker login "${REGISTRY}" -u "${HARBOR_USER}" -p "${HARBOR_DATAFED_GITLAB_CI_REGISTRY_TOKEN}"
    - ./scripts/container_stop.sh -n "gcs-authz" -p
    - random_string=$(bash -c "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w "10" | head -n 1")
    - cat $CI_DATAFED_CORE_PUB_KEY > /shared/datafed-repo-key.pub
    - cat $CI_DATAFED_CORE_PRIV_KEY > /shared/datafed-repo-key.priv
    - echo "#!/bin/bash" > run_globus.sh
    - echo "docker run -d \\" >> run_globus.sh
    - echo "--name \"gcs-authz-${BRANCH_LOWER}-${CI_COMMIT_SHORT_SHA}-${random_string}\" \\" >> run_globus.sh
    - echo "--network host \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_APP_SECRET=\"$CI_DATAFED_GLOBUS_APP_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_APP_ID=\"$CI_DATAFED_GLOBUS_APP_ID\" \\" >> run_globus.sh
    - echo "-e DATAFED_ZEROMQ_SESSION_SECRET=\"$CI_DATAFED_ZEROMQ_SESSION_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_ZEROMQ_SYSTEM_SECRET=\"$CI_DATAFED_ZEROMQ_SYSTEM_SECRET\" \\" >> run_globus.sh
    - echo "-e DATAFED_DOMAIN=\"$CI_DATAFED_DOMAIN\" \\" >> run_globus.sh
    - echo "-e DATAFED_HTTPS_SERVER_PORT=\"443\" \\" >> run_globus.sh
    - echo "-e DATAFED_DEFAULT_LOG_PATH=\"$CONTAINER_LOG_FILE_PATH\" \\" >> run_globus.sh
    - echo "-e DATAFED_CORE_ADDRESS_PORT_INTERNAL=\"${CI_DATAFED_DOMAIN}:7513\" \\" >> run_globus.sh
    - echo "-e DATAFED_GCS_ROOT_NAME=\"${CI_DATAFED_GCS_ROOT_NAME}\" \\" >> run_globus.sh
    - echo "-e DATAFED_GCS_COLLECTION_BASE_PATH=\"/mnt\" \\" >> run_globus.sh
    - echo "-e DATAFED_GCS_COLLECTION_ROOT_PATH=\"/mnt/datafed\" \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_SUBSCRIPTION=\"${CI_DATAFED_GLOBUS_SUBSCRIPTION}\" \\" >> run_globus.sh
    - echo "-e DATAFED_GLOBUS_CONTROL_PORT=\"443\" \\" >> run_globus.sh
    - echo "-e DATAFED_REPO_USER=\"datafed\" \\" >> run_globus.sh
    - echo "-e DATAFED_AUTHZ_USER=\"datafed\" \\" >> run_globus.sh
    - echo "-e UID=\"$USER_ID\" \\" >> run_globus.sh
    - echo "-e BUILD_WITH_METADATA_SERVICES=\"FALSE\" \\" >> run_globus.sh
    - echo "-e DATAFED_REPO_ID_AND_DIR=\"${CI_DATAFED_REPO_ID_AND_DIR}\" \\" >> run_globus.sh
    - echo "-e DATAFED_GCS_IP=\"${CI_DATAFED_GCS_IP}\" \\" >> run_globus.sh
    - echo "-e DATAFED_REPO_DOMAIN=\"${CI_DATAFED_REPO_DOMAIN}\" \\" >> run_globus.sh
    - echo "-v \"${DATAFED_GLOBUS_DIR}:/opt/datafed/globus\" \\" >> run_globus.sh
    - echo "-v \"${HOST_LOG_FILE_PATH}:${CONTAINER_LOG_FILE_PATH}\" \\" >> run_globus.sh
    - echo "-v \"${DATAFED_HOST_COLLECTION_MOUNT}:/mnt/datafed\" \\" >> run_globus.sh
    - echo "-v \"/shared/datafed-repo-key.pub\":/opt/datafed/keys/datafed-repo-key.pub \\" >> run_globus.sh
    - echo "-v \"/shared/datafed-repo-key.priv\":/opt/datafed/keys/datafed-repo-key.priv \\" >> run_globus.sh
    - echo "-t \"${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}\"" >> run_globus.sh
    - if [ -f "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh" ]; then rm "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"; fi
    - chmod +x run_globus.sh
    - ./run_globus.sh
    # Check that repo form has been created before saying job is a success the
    # repo-form is needed before the next job can move forward. In addition
    # ensure that the container has not died due to an error.
    - |
      while [ ! -f "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh" ]
      do
        echo "Waiting for ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"
        sleep 10
        ./scripts/container_run_test.sh -e -c "1" -t "${REGISTRY}/${PROJECT}/${COMPONENT}-${BRANCH_LOWER}:${CI_COMMIT_SHA}"
      done
    - cat "${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"
    - cp ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh .
    - cp ${DATAFED_GLOBUS_DIR}/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json .
  artifacts:
    paths:
      - "${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.sh"
      - "${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json"


end_to_end_client-test:
  variables:
    GIT_STRATEGY: clone
    DATAFED_DATABASE_HOST: "${CI_DATAFED_DATABASE_HOST}"
    DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_DATABASE_ZEROMQ_SYSTEM_SECRET}"
    DATAFED_DATABASE_PASSWORD: "${CI_DATAFED_DATABASE_PASSWORD}"
    DATAFED_USER89_PASSWORD: "${CI_DATAFED_USER89_PASSWORD}"
    DATAFED_USER89_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER89_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER89_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER89_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER89_GLOBUS_UUID: "${CI_DATAFED_USER89_GLOBUS_UUID}"
    DATAFED_USER99_PASSWORD: "${CI_DATAFED_USER99_PASSWORD}"
    DATAFED_USER99_GLOBUS_REFRESH_TOKEN: "${CI_DATAFED_USER99_GLOBUS_REFRESH_TOKEN}"
    DATAFED_USER99_GLOBUS_ACCESS_TOKEN: "${CI_DATAFED_USER99_GLOBUS_ACCESS_TOKEN}"
    DATAFED_USER99_GLOBUS_UUID: "${CI_DATAFED_USER99_GLOBUS_UUID}"
    DATAFED_ZEROMQ_SYSTEM_SECRET: "${CI_DATAFED_ZEROMQ_SYSTEM_SECRET}"
    DATAFED_DOMAIN: "${CI_DATAFED_DOMAIN}"
    DATAFED_PYTHON_CLIENT_ALLOW_SELF_SIGNED_CERTS: "TRUE"
  stage: end-to-end-test
  dependencies:
    - end-to-end-gcs-authz-setup
  needs: ["end-to-end-gcs-authz-setup"]
  tags:
    - ci-datafed-client
  script:
    - export DATAFED_REPO_FORM_PATH="$(pwd)/${CI_DATAFED_REPO_ID_AND_DIR}-repo-form.json"
    - env > env_file
    - echo "Testing"
    - source /shared/install/python/datafed/bin/activate
    - ./scripts/generate_datafed.sh
    - >
      cmake -S. -B build
      -DENABLE_FOXX_TESTS=OFF
      -DBUILD_CORE_SERVER=OFF
      -DBUILD_COMMON=OFF
      -DBUILD_WEB_SERVER=OFF
      -DBUILD_DOCS=OFF
      -DBUILD_PYTHON_CLIENT=ON
      -DBUILD_TESTS=ON
      -DENABLE_END_TO_END_API_TESTS=ON
      -DINSTALL_FOXX=OFF
    - cmake --build build
    - cmake --build build --target pydatafed
    - cmake --build build --target test

end_to_end_web_test:
  variables:
    GIT_STRATEGY: clone
    DATAFED_DATABASE_HOST: "${CI_DATAFED_DATABASE_HOST}"
    DATAFED_WEB_TEST_USERNAME: "datafed89"
    DATAFED_WEB_TEST_PASSWORD: "${CI_DATAFED_USER89_GLOBUSID_PASSWORD}"
    DATAFED_DOMAIN: "${CI_DATAFED_DOMAIN}"
  stage: end-to-end-test
  needs: ["end_to_end_client-test"]
  tags:
    - ci-datafed-client
  script:
    - cd tests/end-to-end/web-UI
    - npm install
    - sudo npx playwright install-deps
    - npx playwright install
    - cd ../../../
    - ./scripts/generate_datafed.sh
    - >
      cmake -S. -B build
      -DENABLE_FOXX_TESTS=OFF
      -DBUILD_CORE_SERVER=OFF
      -DBUILD_COMMON=OFF
      -DBUILD_WEB_SERVER=OFF
      -DBUILD_DOCS=OFF
      -DBUILD_PYTHON_CLIENT=OFF
      -DBUILD_TESTS=ON
      -DENABLE_END_TO_END_WEB_TESTS=ON
      -DINSTALL_FOXX=OFF
    - cmake --build build --target end_to_end_web_tests

end_to_end_error_discovery_arango:
  stage: log
  tags:
    - ci-datafed-arango
  script:
    - sudo journalctl --no-pager -u arangodb3.service
  rules:
    - when: always

end_to_end_error_discovery_gcs:
  extends: .error_logs_client_end_to_end
  variables:
    PROJECT: "datafed"
    COMPONENT: "gcs"
  tags:
    - ci-datafed-globus
    - docker

end_to_end_error_discovery_repo:
  extends: .error_logs_client_end_to_end
  variables:
    PROJECT: "datafed"
    COMPONENT: "repo"
  tags:
    - ci-datafed-globus
    - docker

end_to_end_error_discovery_core:
  extends: .error_logs_client_end_to_end
  variables:
    PROJECT: "datafed"
    COMPONENT: "core"
  tags:
    - ci-datafed-core
    - docker

end_to_end_error_discovery_web:
  extends: .error_logs_client_end_to_end
  variables:
    PROJECT: "datafed"
    COMPONENT: "ws"
  tags:
    - ci-datafed-core
    - docker
